//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChatClientWPF.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IContract", CallbackContract=typeof(ChatClientWPF.ServiceReference1.IContractCallback))]
    public interface IContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/ServiceMethodAdd", ReplyAction="http://tempuri.org/IContract/ServiceMethodAddResponse")]
        int ServiceMethodAdd(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/ServiceMethodAdd", ReplyAction="http://tempuri.org/IContract/ServiceMethodAddResponse")]
        System.Threading.Tasks.Task<int> ServiceMethodAddAsync(int a, int b);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IContract/SendMess")]
        void SendMess(string s, int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IContract/SendMess")]
        System.Threading.Tasks.Task SendMessAsync(string s, int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/Connect", ReplyAction="http://tempuri.org/IContract/ConnectResponse")]
        int Connect(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/Connect", ReplyAction="http://tempuri.org/IContract/ConnectResponse")]
        System.Threading.Tasks.Task<int> ConnectAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/Disconnect", ReplyAction="http://tempuri.org/IContract/DisconnectResponse")]
        void Disconnect(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContract/Disconnect", ReplyAction="http://tempuri.org/IContract/DisconnectResponse")]
        System.Threading.Tasks.Task DisconnectAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IContractCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IContract/ClientMethod")]
        void ClientMethod(string msg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IContractChannel : ChatClientWPF.ServiceReference1.IContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ContractClient : System.ServiceModel.DuplexClientBase<ChatClientWPF.ServiceReference1.IContract>, ChatClientWPF.ServiceReference1.IContract {
        
        public ContractClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ContractClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ContractClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ContractClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ContractClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public int ServiceMethodAdd(int a, int b) {
            return base.Channel.ServiceMethodAdd(a, b);
        }
        
        public System.Threading.Tasks.Task<int> ServiceMethodAddAsync(int a, int b) {
            return base.Channel.ServiceMethodAddAsync(a, b);
        }
        
        public void SendMess(string s, int id) {
            base.Channel.SendMess(s, id);
        }
        
        public System.Threading.Tasks.Task SendMessAsync(string s, int id) {
            return base.Channel.SendMessAsync(s, id);
        }
        
        public int Connect(string name) {
            return base.Channel.Connect(name);
        }
        
        public System.Threading.Tasks.Task<int> ConnectAsync(string name) {
            return base.Channel.ConnectAsync(name);
        }
        
        public void Disconnect(int id) {
            base.Channel.Disconnect(id);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(int id) {
            return base.Channel.DisconnectAsync(id);
        }
    }
}
